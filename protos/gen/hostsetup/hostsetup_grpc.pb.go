// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.6
// source: hostsetup/hostsetup.proto

package hostsetup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HostSetup_SetHostname_FullMethodName     = "/hostsetup.HostSetup/SetHostname"
	HostSetup_ListDNSServers_FullMethodName  = "/hostsetup.HostSetup/ListDNSServers"
	HostSetup_AddDNSServer_FullMethodName    = "/hostsetup.HostSetup/AddDNSServer"
	HostSetup_DeleteDNSServer_FullMethodName = "/hostsetup.HostSetup/DeleteDNSServer"
)

// HostSetupClient is the client API for HostSetup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostSetupClient interface {
	SetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ListDNSServers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListDNSServersResponse, error)
	AddDNSServer(ctx context.Context, in *DNSServerRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	DeleteDNSServer(ctx context.Context, in *DNSServerRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type hostSetupClient struct {
	cc grpc.ClientConnInterface
}

func NewHostSetupClient(cc grpc.ClientConnInterface) HostSetupClient {
	return &hostSetupClient{cc}
}

func (c *hostSetupClient) SetHostname(ctx context.Context, in *HostnameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, HostSetup_SetHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetupClient) ListDNSServers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListDNSServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDNSServersResponse)
	err := c.cc.Invoke(ctx, HostSetup_ListDNSServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetupClient) AddDNSServer(ctx context.Context, in *DNSServerRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, HostSetup_AddDNSServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostSetupClient) DeleteDNSServer(ctx context.Context, in *DNSServerRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, HostSetup_DeleteDNSServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostSetupServer is the server API for HostSetup service.
// All implementations must embed UnimplementedHostSetupServer
// for forward compatibility
type HostSetupServer interface {
	SetHostname(context.Context, *HostnameRequest) (*SuccessResponse, error)
	ListDNSServers(context.Context, *EmptyRequest) (*ListDNSServersResponse, error)
	AddDNSServer(context.Context, *DNSServerRequest) (*SuccessResponse, error)
	DeleteDNSServer(context.Context, *DNSServerRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedHostSetupServer()
}

// UnimplementedHostSetupServer must be embedded to have forward compatible implementations.
type UnimplementedHostSetupServer struct {
}

func (UnimplementedHostSetupServer) SetHostname(context.Context, *HostnameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostname not implemented")
}
func (UnimplementedHostSetupServer) ListDNSServers(context.Context, *EmptyRequest) (*ListDNSServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDNSServers not implemented")
}
func (UnimplementedHostSetupServer) AddDNSServer(context.Context, *DNSServerRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDNSServer not implemented")
}
func (UnimplementedHostSetupServer) DeleteDNSServer(context.Context, *DNSServerRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNSServer not implemented")
}
func (UnimplementedHostSetupServer) mustEmbedUnimplementedHostSetupServer() {}

// UnsafeHostSetupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostSetupServer will
// result in compilation errors.
type UnsafeHostSetupServer interface {
	mustEmbedUnimplementedHostSetupServer()
}

func RegisterHostSetupServer(s grpc.ServiceRegistrar, srv HostSetupServer) {
	s.RegisterService(&HostSetup_ServiceDesc, srv)
}

func _HostSetup_SetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetupServer).SetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostSetup_SetHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetupServer).SetHostname(ctx, req.(*HostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetup_ListDNSServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetupServer).ListDNSServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostSetup_ListDNSServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetupServer).ListDNSServers(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetup_AddDNSServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetupServer).AddDNSServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostSetup_AddDNSServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetupServer).AddDNSServer(ctx, req.(*DNSServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostSetup_DeleteDNSServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostSetupServer).DeleteDNSServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostSetup_DeleteDNSServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostSetupServer).DeleteDNSServer(ctx, req.(*DNSServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostSetup_ServiceDesc is the grpc.ServiceDesc for HostSetup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostSetup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hostsetup.HostSetup",
	HandlerType: (*HostSetupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetHostname",
			Handler:    _HostSetup_SetHostname_Handler,
		},
		{
			MethodName: "ListDNSServers",
			Handler:    _HostSetup_ListDNSServers_Handler,
		},
		{
			MethodName: "AddDNSServer",
			Handler:    _HostSetup_AddDNSServer_Handler,
		},
		{
			MethodName: "DeleteDNSServer",
			Handler:    _HostSetup_DeleteDNSServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hostsetup/hostsetup.proto",
}
